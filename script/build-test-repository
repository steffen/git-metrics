#!/bin/sh
set -e

cd "$(dirname "$0")/.."

TEST_REPOSITORY="tmp/test-repository"
FILE_CONTENT="This is a test file with a very long path."

# Clean up any previous test
rm -rf "$TEST_REPOSITORY"
mkdir -p "$TEST_REPOSITORY"
cd "$TEST_REPOSITORY"

git init --initial-branch=main

git config --local user.email "test@example.com"
git config --local user.name "Test user"

GIT_PAGER=cat git config --list --show-origin

# Create a README file
echo "# Test Repository" > README.md
git add README.md
GIT_AUTHOR_DATE="2025-01-01T00:00:00 +0000" GIT_COMMITTER_DATE="2025-01-01T00:00:00 +0000" git commit -m "Add README file"

# Output details of the latest commit
git log -1 --stat --pretty=fuller

# Create 11 long path files
for i in $(seq 1 11); do
    LONG_PATH_FILE="a/very/long/path/that/exceeds/the/limit/for/display/in/the/table/and/should/be/truncated/by/the/tool/very-long-file-name-$i.txt"
    mkdir -p "$(dirname "$LONG_PATH_FILE")"
    echo "$FILE_CONTENT $i" > "$LONG_PATH_FILE"
    git add "$LONG_PATH_FILE"
done
GIT_AUTHOR_DATE="2025-01-01T00:00:00 +0000" GIT_COMMITTER_DATE="2025-01-01T00:00:00 +0000" git commit -m "Add 11 files with long paths"

# Create a directory with a very long name that should be truncated
LONG_DIR_NAME="this-is-a-very-long-directory-name-that-should-definitely-be-truncated-when-displayed-in-the-largest-directories-section-because-it-exceeds-the-display-width-limits"
mkdir -p "$LONG_DIR_NAME"
echo "$FILE_CONTENT long dir" > "$LONG_DIR_NAME/file-in-long-dir.txt"
git add "$LONG_DIR_NAME"
GIT_AUTHOR_DATE="2025-01-01T00:00:00 +0000" GIT_COMMITTER_DATE="2025-01-01T00:00:00 +0000" git commit -m "Add directory with very long name"

# Create a file with a name that is exactly 44 characters long
EXACT44_FILE="this-file-name-is-exactly-44-chars-long.jpeg"
echo "$FILE_CONTENT exact44" > "$EXACT44_FILE"
git add "$EXACT44_FILE"
GIT_AUTHOR_DATE="2025-01-01T00:00:00 +0000" GIT_COMMITTER_DATE="2025-01-01T00:00:00 +0000" git commit -m "Add file with exactly 44 chars in name"

# Test case 1: Add a file and then remove it
echo "Test file to be removed" > to_be_removed.txt
git add to_be_removed.txt
GIT_AUTHOR_DATE="2025-01-01T00:00:00 +0000" GIT_COMMITTER_DATE="2025-01-01T00:00:00 +0000" git commit -m "Add file that will be removed"
git rm to_be_removed.txt
GIT_AUTHOR_DATE="2025-01-01T00:00:00 +0000" GIT_COMMITTER_DATE="2025-01-01T00:00:00 +0000" git commit -m "Remove the file"

# Test case 2: Add a file and then rename it
echo "Test file to be renamed" > to_be_renamed.txt
git add to_be_renamed.txt
GIT_AUTHOR_DATE="2025-01-01T00:00:00 +0000" GIT_COMMITTER_DATE="2025-01-01T00:00:00 +0000" git commit -m "Add file that will be renamed"
git mv to_be_renamed.txt renamed_file.txt
GIT_AUTHOR_DATE="2025-01-01T00:00:00 +0000" GIT_COMMITTER_DATE="2025-01-01T00:00:00 +0000" git commit -m "Rename the file"

# Test case 3: Add a file to a new folder and then remove it
mkdir -p new_folder
echo "Test file in new folder to be removed" > new_folder/to_be_removed.txt
git add new_folder
GIT_AUTHOR_DATE="2025-01-01T00:00:00 +0000" GIT_COMMITTER_DATE="2025-01-01T00:00:00 +0000" git commit -m "Add new folder with file"
git rm new_folder/to_be_removed.txt
GIT_AUTHOR_DATE="2025-01-01T00:00:00 +0000" GIT_COMMITTER_DATE="2025-01-01T00:00:00 +0000" git commit -m "Remove file from new folder"

# Test case 4: Add a file to a folder and then move it to another folder
mkdir -p another_folder
echo "Test file to be moved" > a/to_be_moved.txt
git add a/to_be_moved.txt
GIT_AUTHOR_DATE="2025-01-01T00:00:00 +0000" GIT_COMMITTER_DATE="2025-01-01T00:00:00 +0000" git commit -m "Add file that will be moved"
git mv a/to_be_moved.txt another_folder/moved_file.txt
GIT_AUTHOR_DATE="2025-01-01T00:00:00 +0000" GIT_COMMITTER_DATE="2025-01-01T00:00:00 +0000" git commit -m "Move the file to another folder"