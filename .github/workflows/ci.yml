name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.github/dependabot.yml'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.github/dependabot.yml'

permissions:
    contents: read

env:
  BINARY_NAME: git-metrics
  PLATFORMS: 'linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64 windows/arm64'
  DIST_PATH: dist

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Needed to fetch all tags

      - name: Get version for build
        id: version
        run: |
          # Get latest semver tag if exists, or use placeholder for PR builds
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="0.0.0-dev"
          else
            LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || echo "v1.0.0")
            # Remove 'v' prefix if it exists
            if [[ $LATEST_TAG == v* ]]; then
              CURRENT_VERSION=${LATEST_TAG#v}
            else
              CURRENT_VERSION=$LATEST_TAG
            fi
            
            # Split the version into parts
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            # Increment minor version for next build
            NEW_MINOR=$((MINOR + 1))
            VERSION="$MAJOR.$NEW_MINOR.0"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building with version: $VERSION"

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: './go.mod'

      - name: Run unit tests
        run: go test ./... -v

      - name: Build binaries
        shell: bash
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          mkdir -p "${DIST_PATH}"
          for platform in ${PLATFORMS}; do
            OPERATING_SYSTEM="${platform%/*}"
            ARCHITECTURE="${platform#*/}"

            echo "Building for ${OPERATING_SYSTEM}/${ARCHITECTURE}..."

            OUTPUT="${DIST_PATH}/${BINARY_NAME}-${OPERATING_SYSTEM}-${ARCHITECTURE}"
            if [ "${OPERATING_SYSTEM}" = "windows" ]; then
              OUTPUT="$OUTPUT.exe"
            fi

            echo "  Building ${OUTPUT}"
            GOOS="${OPERATING_SYSTEM}" GOARCH="${ARCHITECTURE}" go build -ldflags "-X git-metrics/pkg/utils.GitMetricsVersion=${VERSION}" -o "$OUTPUT"

            echo "Built ${OUTPUT}"
          done

      - name: Run integration tests
        run: ./script/run-integration-tests

      - name: Upload binaries
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: binaries
          retention-days: 1
          path: |
            ${{env.DIST_PATH}}/**

  smoke_test:
    strategy:
      fail-fast: false
      matrix:
        runner: [macos-latest, windows-latest]
    runs-on: ${{ matrix.runner }}
    needs: build

    name: Smoke Test ${{ matrix.runner }}

    steps:
      # smoke test with our own repo
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download binaries
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v 4.3.0
        with:
          name: binaries
          path: ${{ env.DIST_PATH }}

      - name: Run smoke test
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            chmod +x ./${DIST_PATH}/${BINARY_NAME}-darwin-amd64
            ./${DIST_PATH}/${BINARY_NAME}-darwin-amd64
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            ./${DIST_PATH}/${BINARY_NAME}-windows-amd64.exe
          fi

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build,smoke_test]

    permissions:
      contents: write
      id-token: write
      attestations: write      

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Needed to fetch all tags

      - name: Calculate version
        id: version
        run: |
          # Get latest semver tag if exists, or default to 1.0.0
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || echo "v1.0.0")
          
          # Remove 'v' prefix if it exists
          if [[ $LATEST_TAG == v* ]]; then
            CURRENT_VERSION=${LATEST_TAG#v}
          else
            CURRENT_VERSION=$LATEST_TAG
          fi
          
          echo "Current version from tag: $CURRENT_VERSION"
          
          # Split the version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment minor version, reset patch
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Download binaries
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v 4.3.0
        with:
          name: binaries
          path: ${{ env.DIST_PATH }}

      - name: Create platform archives
        env:
          VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          # ensure all executables have execute bit
          chmod +x ${DIST_PATH}/*

          for binary in ${DIST_PATH}/${BINARY_NAME}-*; do
            filename=$(basename "$binary")
            OPERATING_SYSTEM=$(echo $filename | cut -d'-' -f3)
            ARCHITECTURE=$(echo $filename | cut -d'-' -f4 | cut -d'.' -f1)

            echo "Creating archive for ${OPERATING_SYSTEM}/${ARCHITECTURE}..."

            # Create temp dir for packaging
            package_directory="pkg/${OPERATING_SYSTEM}-${ARCHITECTURE}"
            mkdir -p "$package_directory"

            output_file="${package_directory}/${BINARY_NAME}"

            if [ "${OPERATING_SYSTEM}" = "windows" ]; then
              output_file+=.exe
            fi

            cp "$binary" "${output_file}"

            # Pack with tar.gz for linux and zip for windows/darwin
            if [ "${OPERATING_SYSTEM}" = "linux" ]; then
              echo "  Creating tar archive: ${BINARY_NAME}-${OPERATING_SYSTEM}-${ARCHITECTURE}.tar.gz"
              tar -czf "${BINARY_NAME}-${OPERATING_SYSTEM}-${ARCHITECTURE}.tar.gz" -C "${package_directory}" .
            else
              echo "  Creating zip archive: ${BINARY_NAME}-${OPERATING_SYSTEM}-${ARCHITECTURE}.zip"
              (cd "$package_directory" && zip "${GITHUB_WORKSPACE}/${BINARY_NAME}-${OPERATING_SYSTEM}-${ARCHITECTURE}.zip" *)
            fi

            rm -rf "$package_directory"
          done
          
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-path: |
            ${{ env.BINARY_NAME }}-*.tar.gz
            ${{ env.BINARY_NAME }}-*.zip

      - name: Create Release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: ${{ steps.version.outputs.new_version }}
          files: |
            ${{ env.BINARY_NAME }}-*.tar.gz
            ${{ env.BINARY_NAME }}-*.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
