name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.github/dependabot.yml'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.github/dependabot.yml'

permissions:
    contents: read

env:
  BINARY_NAME: git-metrics
  PLATFORMS: 'linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64 windows/arm64'
  DIST_PATH: dist

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: './go.mod'

      - name: Run unit tests
        run: go test ./... -v

      - name: Build binaries
        shell: bash
        run: |
          mkdir -p "${DIST_PATH}"
          for platform in ${PLATFORMS}; do
            OS="${platform%/*}"
            ARCH="${platform#*/}"

            echo "Building for ${OS}/${ARCH}..."

            OUTPUT="${DIST_PATH}/${BINARY_NAME}-${OS}-${ARCH}"
            if [ "${OS}" = "windows" ]; then
              OUTPUT="$OUTPUT.exe"
            fi

            echo "  Building ${OUTPUT}"
            GOOS="${OS}" GOARCH="${ARCH}" go build -o "$OUTPUT"

            echo "Built ${OUTPUT}"
          done

      - name: Run integration tests
        run: |
          ln -s "${DIST_PATH}/${BINARY_NAME}-linux-amd64" ./ghe-metrics
          ./script/run-integration-tests

      - name: Upload binaries
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: binaries
          retention-days: 1
          path: |
            ${{env.DIST_PATH}}/**

  smoke_test:
    strategy:
      fail-fast: false
      matrix:
        runner: [macos-latest, windows-latest]
    runs-on: ${{ matrix.runner }}
    needs: build

    name: Smoke Test ${{ matrix.runner }}

    steps:
      # smoke test with our own repo
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download binaries
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v 4.3.0
        with:
          name: binaries
          path: ${{ env.DIST_PATH }}

      - name: Run smoke test
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            chmod +x ./${DIST_PATH}/${BINARY_NAME}-darwin-amd64
            ./${DIST_PATH}/${BINARY_NAME}-darwin-amd64
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            ./${DIST_PATH}/${BINARY_NAME}-windows-amd64.exe
          fi

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build,smoke_test]
  
    permissions:
      contents: write
      id-token: write
      attestations: write      

    steps:

      - name: Download binaries
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v 4.3.0
        with:
          name: binaries
          path: ${{ env.DIST_PATH }}

      - name: Create platform archives
        run: |
          # ensure all executables have execute bit
          chmod +x ${DIST_PATH}/*

          for binary in ${DIST_PATH}/${BINARY_NAME}-*; do
            filename=$(basename "$binary")
            OS=$(echo $filename | cut -d'-' -f3)
            ARCH=$(echo $filename | cut -d'-' -f4 | cut -d'.' -f1)

            echo "Creating archive for ${OS}/${ARCH}..."

            # Create temp dir for packaging
            pkg_dir="pkg/${OS}-${ARCH}"
            mkdir -p "$pkg_dir"

            output_file="${pkg_dir}/${BINARY_NAME}"

            if [ "${OS}" = "windows" ]; then
              output_file+=.exe
            fi

            cp "$binary" "${output_file}"

            # Pack with tar.gz for linux and zip for windows/darwin
            if [ "${OS}" = "linux" ]; then
              echo "  Taring to ${BINARY_NAME}-${OS}-${ARCH}.tar.gz"
              tar -czf "${BINARY_NAME}-${OS}-${ARCH}.tar.gz" -C "${pkg_dir}" .
            else
              echo "  Zipping to ${BINARY_NAME}-${OS}-${ARCH}.zip"
              (cd "$pkg_dir" && zip "${GITHUB_WORKSPACE}/${BINARY_NAME}-${OS}-${ARCH}.zip" *)
            fi

            rm -rf "$pkg_dir"
          done

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@db473fddc028af60658334401dc6fa3ffd8669fd # v2.3.0
        with:
          subject-path: |
            ${{ env.BINARY_NAME }}-*.gz
            ${{ env.BINARY_NAME }}-*.zip

      - name: Generate release tag
        id: tag
        run: |
          echo "release_tag=$(date +'%Y.%m.%d')-${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name: Release ${{ steps.tag.outputs.release_tag }}
          files: |
            ${{ env.BINARY_NAME }}-*.gz
            ${{ env.BINARY_NAME }}-*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
